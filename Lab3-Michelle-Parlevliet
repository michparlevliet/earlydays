-- 1. Write a statement that shows all the thefts that happened in neighbourhoods that have 'Humber' in the name.
SELECT * FROM bikeTheft
WHERE NeighbourhoodName LIKE '%Humber%'

-- 2. Narrow the list from question 1 down by only showing thefts in odd-numbered years.
SELECT * FROM bikeTheft
WHERE NeighbourhoodName LIKE '%Humber%' AND Report_Year%2 = 1

-- 3. Get the average cost of the bikes recorded in this table. Format this result as a dollar figure, including a dollar sign, rounded to the nearest penny
SELECT CONCAT('$',ROUND(AVG(Cost_of_Bike),2)) AS 'Average Cost' FROM bikeTheft

-- 4. Write a query that returns the number of unique combinations of bike colour & speed. Note: null is not a colour or a speed.
SELECT COUNT(DISTINCT Bike_Speed, Bike_Colour) FROM bikeTheft
WHERE Bike_Speed IS NOT NULL AND Bike_Colour IS NOT NULL

-- 5. Write a statement that shows a list of location types with more than 500 total thefts.
SELECT Location_Type  FROM bikeTheft
GROUP BY Location_Type 
HAVING COUNT(*) > 500

-- 6. Write a statement that returns the date of the first bike theft contained in this table. (Use an aggregate function for this.)
SELECT MIN(Occurrence_Date) FROM bikeTheft

-- 7. Write a statement that returns only the top 10 neighbourhoods with the most reported thefts.
SELECT Location_Type  FROM bikeTheft
GROUP BY Location_Type 
ORDER BY COUNT(*) DESC 
LIMIT 10

-- 8. Select 2 columns. The first column should be the sum of the 'Cost of Bike' column, divided by the total number of rows. The second column should be result of running the AVG() function on the 'Cost of Bike' column.
SELECT SUM(Cost_of_Bike)/COUNT(*), AVG(Cost_of_Bike) FROM bikeTheft

-- 9. In a code comment, tell me if first column and the second column of the previous question are equal. If they are, explain why. If they are not, explain what you could do to make the result of the AVG() function match the value of the first column.
SELECT COUNT(*) FROM bikeTheft 
WHERE Cost_of_Bike IS NULL
/* 
The first and second column from question 8 are not equal because the first value 
includes rows that contain NULL values and the second does not. This means the first value
is counting 1,975 more rows for the denominator than the second due to the COUNT(*) aggregate 
(which counts NULL values), so the average would be calculated differently than in the second,
which excludes NULL values because it uses the AVG aggregate function which cannot count these.
*/


